name: Build and Push Docker # กำหนดชื่อ workflow ที่จะแสดงใน GitHub Actions

on: # กำหนดเงื่อนไขการทำงานของ workflow
  push: # ทำงานเมื่อมีการ push โค้ด
    branches: [main] # เฉพาะ branch main

jobs: # กำหนดกลุ่มของงาน (jobs)
  build: # ชื่องาน (job) ว่า build
    runs-on: ubuntu-latest # ใช้ runner ที่เป็น Ubuntu เวอร์ชันล่าสุด
    steps: # ลำดับขั้นตอนใน job นี้
      - uses: actions/checkout@v3 # เช็คเอาท์ซอร์สโค้ดจาก repository

      - name: Set up Python # ตั้งชื่อขั้นตอนนี้ว่า Set up Python
        uses: actions/setup-python@v4 # ใช้ action สำหรับติดตั้ง Python
        with:
          python-version: '3.11' # กำหนดเวอร์ชัน Python ที่ต้องการ

      - name: Log in to DockerHub # ตั้งชื่อขั้นตอนนี้ว่า Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin # ล็อกอินเข้า DockerHub โดยใช้ username และ password ที่เก็บใน secrets

      - name: Build Docker image # ตั้งชื่อขั้นตอนนี้ว่า Build Docker image
        run: docker build -t orathaisu/hello-python:${{ github.sha }} . # สร้าง Docker image และแท็กเป็น commit hash ปัจจุบัน

      - name: Push to DockerHub # ตั้งชื่อขั้นตอนนี้ว่า Push to DockerHub
        run: docker push orathaisu/hello-python:${{ github.sha }} # อัปโหลด Docker image ที่สร้างไปยัง DockerHub
        
      - name: Replace image tag in deployment.yaml # ตั้งชื่อขั้นตอนนี้ว่า Replace image tag in deployment.yaml
        run: sed -i "s|orathaisu/hello-python:.*|orathaisu/hello-python:${{ github.sha }}|g" k8s/deployment.yaml # แทนที่ tag ของ Docker image ในไฟล์ deployment.yaml ด้วย commit hash ปัจจุบัน

      - name: Commit updated deployment.yaml
        run: |
          git config --local user.email "orathai.k@v-xip.com"
          git config --local user.name "orathaipp"
          git add k8s/deployment.yaml
          git commit -m "Update image tag to ${{ github.sha }}"
          git push origin main # อัปเดตไฟล์ deployment.yaml ใน branch main ด้วย tag ใหม่